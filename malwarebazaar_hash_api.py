import requests
import json
from rich import print
from tabulate import tabulate

from dotenv import load_dotenv
load_dotenv()
import os
api_key=os.getenv("MALWAREBAZAAR_API_KEY")


def malwarebazaar_api_files(x):
    
    url = "https://mb-api.abuse.ch/api/v1/"
   

    data = {
        "query": "get_info",
        "hash": x
       }

    response = requests.post(url, data=data)

# Check if the request was successful (status code 200)
    if response.status_code == 200:
        #print("Response:")
        pydata=json.loads(response.text)
        if "data" in pydata:
            data=pydata["data"]
            
            main_headers = ['SHA256 Hash', 'File Name', 'File Size', 'File Type', 'First Seen', 'Reporter']
            main_data = [[
                entry['sha256_hash'], 
                entry['file_name'], 
                entry['file_size'], 
                entry['file_type'], 
                entry['first_seen'], 
                entry['reporter']
            ] for entry in data]

            print("Main Information:")
            print(tabulate(main_data, headers=main_headers))
            print()

            # Tabulate Intel Vendor Information
            intel_headers = ['Vendor', 'Detection', 'Link']
            intel_data = []
            for entry in data:
                vendor_intel = entry['vendor_intel']
                for vendor, info in vendor_intel.items():
                    if isinstance(info, dict):
                        detection = info.get('detection', 'N/A')
                        link = info.get('link', 'N/A')
                        intel_data.append([vendor, detection, link])
                    elif isinstance(info, list):
                        for item in info:
                            detection = item.get('detection', 'N/A')
                            link = item.get('link', 'N/A')
                            intel_data.append([vendor, detection, link])

            print("Intel Vendor Information:")
            print(tabulate(intel_data, headers=intel_headers))
            print()

# Tabulate YARA Rules
            yara_headers = ['Rule Name', 'Author', 'Description', 'Reference']
            yara_data = []
            for entry in data:
                yara_rules = entry.get('yara_rules')
                if yara_rules is not None:
                    for rule in yara_rules:
                        yara_data.append([
                            rule['rule_name'], 
                            rule.get('author', 'N/A'), 
                            rule.get('description', 'N/A'), 
                            rule.get('reference', 'N/A')
                        ])


            print("YARA Rules:")
            print(tabulate(yara_data, headers=yara_headers,tablefmt="grid"))
        
    else:
        print(f"Error: {response.status_code}")
        print(response.text)

